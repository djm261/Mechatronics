/*
 * Mechatronics_Lab8_LabCode1.cpp
 *
 * Created: 3/19/2025 4:25:31 PM
 * Author : djm261
 */ 


// Library //
#include <avr/io.h>

#define FREQ_CLK 1000000 // Clock frequency (default setting for the ATmega328P -- 8 MHz internal clock with divide-by-8

// Functions //
void initialize_usart(void); // function to set up USART
void transmit_data_usart(char); // function to transmit a byte by USART
void wait(int msec); // wait function
void delayNms_timer0(); 

// Global Variable
char data = 0;


int main(void)
{		
	// Pin Setup
	DDRD = 1<<PD6;
	OCR0A = 0x00;
	TCCR0A = 0b11000011;
	TCCR0B = 0b00000001;
	
	
	// Initialize USART for communication
	initialize_usart();
		
	// Enable reception
	// UCSR0B |= (1<<RXEN0);
		
	while (1) 
	{
		// Wait 1 second
		wait(1000);
			
		// µC1 sends 0xFE to µC2
		transmit_data_usart(0xFE);
			
		// µC1 receives a value from µC2
		while (!(UCSR0A & 0b10000000)); // Wait for reception complete
		data = UDR0;       // Read received data
		OCR0A = data;
			
		// Wait 3 seconds
		wait(3000);
			
		// µC1 sends 0xFF to µC2
		transmit_data_usart(0xFF);
			
		// µC1 receives a value from µC2
		while (!(UCSR0A & 0b10000000)); // Wait for reception complete
		data = UDR0;       // Read received data
		OCR0A = data;
			
		// Wait 3 seconds
		wait(3000);
			
		// µC1 sends 0x55 to µC2
		transmit_data_usart(0x55);
			
		// µC1 receives a value from µC2
		while (!(UCSR0A & 0b10000000)); // Wait for reception complete
		data = UDR0;       // Read received data
		OCR0A = data;
	}
	return 0;
}

void initialize_usart(void) // function to set up USART
{
	UCSR0B = (1<<TXEN0); // enable serial transmission
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00) ; // Asynchronous mode, 8-bit data; no parity; 1 stop bit
	UBRR0L = 0x33; // 9,600 baud if Fosc = 16MHz
}

void transmit_data_usart(char data) // Function to transmit a character
{
	while (!(UCSR0A & (1<<UDRE0))); // Poll to make sure transmit buffer is ready, 				// then send data
	UDR0 = data;
}

void wait(int msec)
{
	// This subroutine calls others to create a delay
	// function passes number of msec to delay
	while (msec > 0) {
		delayNms_timer0();
		msec = msec - 1;
	}
} // end wait

void delayNms_timer0()
{
	// This subroutine creates a delay of N msec using TIMER0 with prescaler on clock, where, for a 16MHz clock:
	//		N = .0156 msec for no prescaler and count of 250 (preload counter with 5)
	//		N = 0.125 msec for prescaler set to 8 and count of 250 (preload counter with 5)
	//		N = 1 msec for prescaler set to 64 and count of 250 (preload counter with 5)
	//		N = 4 msec for prescaler set to 256 and count of 250 (preload counter with 5)
	//		N = 16 msec for prescaler set to 1,024 and count of 250 (preload counter with 5)

	TCCR1A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
	TCNT1 = 5;  // load timer0 with number for delay (count must reach 255-5)
	//TCCR0B = 0x01; // Start Timer0, Normal mode, crystal clock, no prescaler
	// TCCR0B = 0x02; // Start Timer0, Normal mode, crystal clock, prescaler = 8
	TCCR1B =  0x03;  // Start Timer0, Normal mode, crystal clock, prescaler = 64
	//TCCR0B = 0x04; // Start Timer0, Normal mode, crystal clock, prescaler = 256
	//TCCR0B = 0x05; // Start Timer0, Normal mode, crystal clock, prescaler = 1024

	while ((TIFR1 & (0x1<<TOV1)) == 0); // wait for TOV0 to roll over:

	TCCR1B = 0x00; // Stop Timer0
	TIFR1 = 0x1<<TOV1;  // Clear TOV0 (note that this is an odd bit in that it is cleared by writing a 1 to it)
}
